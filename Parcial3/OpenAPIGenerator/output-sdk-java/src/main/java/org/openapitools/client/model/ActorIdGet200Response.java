/*
 * API Actores
 * Documentaci√≥n de la API de actores
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActorIdGet200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-30T09:50:01.262177800-05:00[America/Matamoros]", comments = "Generator version: 7.13.0")
public class ActorIdGet200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Integer id;

  public static final String SERIALIZED_NAME_NOMBRE = "nombre";
  @SerializedName(SERIALIZED_NAME_NOMBRE)
  @javax.annotation.Nullable
  private String nombre;

  public static final String SERIALIZED_NAME_GENERO = "genero";
  @SerializedName(SERIALIZED_NAME_GENERO)
  @javax.annotation.Nullable
  private String genero;

  public static final String SERIALIZED_NAME_NACIONALIDAD = "nacionalidad";
  @SerializedName(SERIALIZED_NAME_NACIONALIDAD)
  @javax.annotation.Nullable
  private String nacionalidad;

  public static final String SERIALIZED_NAME_PELICULA_MAS_EXITOSA = "peliculaMasExitosa";
  @SerializedName(SERIALIZED_NAME_PELICULA_MAS_EXITOSA)
  @javax.annotation.Nullable
  private String peliculaMasExitosa;

  public static final String SERIALIZED_NAME_PREMIOS = "premios";
  @SerializedName(SERIALIZED_NAME_PREMIOS)
  @javax.annotation.Nullable
  private Integer premios;

  public ActorIdGet200Response() {
  }

  public ActorIdGet200Response id(@javax.annotation.Nullable Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Integer id) {
    this.id = id;
  }


  public ActorIdGet200Response nombre(@javax.annotation.Nullable String nombre) {
    this.nombre = nombre;
    return this;
  }

  /**
   * Get nombre
   * @return nombre
   */
  @javax.annotation.Nullable
  public String getNombre() {
    return nombre;
  }

  public void setNombre(@javax.annotation.Nullable String nombre) {
    this.nombre = nombre;
  }


  public ActorIdGet200Response genero(@javax.annotation.Nullable String genero) {
    this.genero = genero;
    return this;
  }

  /**
   * Get genero
   * @return genero
   */
  @javax.annotation.Nullable
  public String getGenero() {
    return genero;
  }

  public void setGenero(@javax.annotation.Nullable String genero) {
    this.genero = genero;
  }


  public ActorIdGet200Response nacionalidad(@javax.annotation.Nullable String nacionalidad) {
    this.nacionalidad = nacionalidad;
    return this;
  }

  /**
   * Get nacionalidad
   * @return nacionalidad
   */
  @javax.annotation.Nullable
  public String getNacionalidad() {
    return nacionalidad;
  }

  public void setNacionalidad(@javax.annotation.Nullable String nacionalidad) {
    this.nacionalidad = nacionalidad;
  }


  public ActorIdGet200Response peliculaMasExitosa(@javax.annotation.Nullable String peliculaMasExitosa) {
    this.peliculaMasExitosa = peliculaMasExitosa;
    return this;
  }

  /**
   * Get peliculaMasExitosa
   * @return peliculaMasExitosa
   */
  @javax.annotation.Nullable
  public String getPeliculaMasExitosa() {
    return peliculaMasExitosa;
  }

  public void setPeliculaMasExitosa(@javax.annotation.Nullable String peliculaMasExitosa) {
    this.peliculaMasExitosa = peliculaMasExitosa;
  }


  public ActorIdGet200Response premios(@javax.annotation.Nullable Integer premios) {
    this.premios = premios;
    return this;
  }

  /**
   * Get premios
   * @return premios
   */
  @javax.annotation.Nullable
  public Integer getPremios() {
    return premios;
  }

  public void setPremios(@javax.annotation.Nullable Integer premios) {
    this.premios = premios;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActorIdGet200Response actorIdGet200Response = (ActorIdGet200Response) o;
    return Objects.equals(this.id, actorIdGet200Response.id) &&
        Objects.equals(this.nombre, actorIdGet200Response.nombre) &&
        Objects.equals(this.genero, actorIdGet200Response.genero) &&
        Objects.equals(this.nacionalidad, actorIdGet200Response.nacionalidad) &&
        Objects.equals(this.peliculaMasExitosa, actorIdGet200Response.peliculaMasExitosa) &&
        Objects.equals(this.premios, actorIdGet200Response.premios);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nombre, genero, nacionalidad, peliculaMasExitosa, premios);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActorIdGet200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nombre: ").append(toIndentedString(nombre)).append("\n");
    sb.append("    genero: ").append(toIndentedString(genero)).append("\n");
    sb.append("    nacionalidad: ").append(toIndentedString(nacionalidad)).append("\n");
    sb.append("    peliculaMasExitosa: ").append(toIndentedString(peliculaMasExitosa)).append("\n");
    sb.append("    premios: ").append(toIndentedString(premios)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nombre");
    openapiFields.add("genero");
    openapiFields.add("nacionalidad");
    openapiFields.add("peliculaMasExitosa");
    openapiFields.add("premios");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActorIdGet200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActorIdGet200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActorIdGet200Response is not found in the empty JSON string", ActorIdGet200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActorIdGet200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActorIdGet200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nombre") != null && !jsonObj.get("nombre").isJsonNull()) && !jsonObj.get("nombre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nombre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nombre").toString()));
      }
      if ((jsonObj.get("genero") != null && !jsonObj.get("genero").isJsonNull()) && !jsonObj.get("genero").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genero` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genero").toString()));
      }
      if ((jsonObj.get("nacionalidad") != null && !jsonObj.get("nacionalidad").isJsonNull()) && !jsonObj.get("nacionalidad").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nacionalidad` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nacionalidad").toString()));
      }
      if ((jsonObj.get("peliculaMasExitosa") != null && !jsonObj.get("peliculaMasExitosa").isJsonNull()) && !jsonObj.get("peliculaMasExitosa").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peliculaMasExitosa` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peliculaMasExitosa").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActorIdGet200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActorIdGet200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActorIdGet200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActorIdGet200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ActorIdGet200Response>() {
           @Override
           public void write(JsonWriter out, ActorIdGet200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActorIdGet200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActorIdGet200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActorIdGet200Response
   * @throws IOException if the JSON string is invalid with respect to ActorIdGet200Response
   */
  public static ActorIdGet200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActorIdGet200Response.class);
  }

  /**
   * Convert an instance of ActorIdGet200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

